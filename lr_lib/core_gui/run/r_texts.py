# -*- coding: UTF-8 -*-
# окно Настраиваемый запуск поиска WRSP

TT_N = '''
Поиск {param} по начальным символам param-имени.
Метод основан на том, что имена {param} часто называются похоже.

  Например всего в скрипте используются 8 {param}, и их можно разбить на 3 группы: 
   1) session id имя {param}: "rahEr7fMW4e7jFYAotXePPfYfLFltRO43GRNLOFRKHdB4orbetDW!1068185291".
   2) имя {param} начинается на "jBqe": jBqeQ, jBqe_1, jBqe_2, jBqe_3.
   3) имя {param} начинается на "zkau_": zkau_1, zkau2, zkau_3.
  
  Таким образом, если один из {param}, например "jBqeQ" группы 2, уже найден, любым другим способом,
   то зная имя {param}, по начальным символам имени - "jBqe", можно найти 
    и все остальные {param}, для его группы 2: jBqe_1, jBqe_2, jBqe_3.
  Аналогично, для "zkau2" можно найти: zkau_1, zkau_3.
  
  Кол-во начальных символов, для поиска похожих {param} задает специальный SpinBox.
  
Есть 3 способа использования:
    1) Вручную, из контекстного меню мыши(web_reg_save_param \ найти по началу имени).
    2) Дополнительный, используя диалог-окно: стандартный набор имен c возможностью добавления.
    3) Основной, запускать в самом конце, или при работе кнопки "Запуск", когда все {param},
        предварительно найдены(или созданы), всеми другими способами.
'''.strip()

TT_RE = '''
Поиск {param} regexp способом.
Метод основан на поиске re.findall(regexp, text) слов в тексте по regexp-шаблону,
    например: =(.+?)&
'''.strip()

TT_REP = '''
Поиск {param} regexp способом с постобработкой.
Метод основан на поиске re.findall(regexp, text) слов в тексте по regexp-шаблону,
    и дальнейшей обработке результата.
Например в "zul.sel.Treecell" конструкциях: '\w+.\w+.\w+','\w+',{

Можно попытатся поменять regexp, но добавлять/удалять нельзя, 
    тк к regexp привязана постобработка его результата.
'''.strip()

TT_SPL = '''
Поиск {param} split способом.
Метод основан на том, что RequestBody файлы, да и не только, выглядят примерно так:
    ...dtid=z__5j&cmd_0=onRender&opt_0=i&uuid_0=bJsPc0&data_0=%7B%22items%22...
    
Самый простой str.split + последующая очистка, дает эфект, причем на любых типах файлов.
Тк никакой "логики" в нем нету, никак и не настраивается.
'''.strip()

TT_PN = '''
5) LAST: по начальным символам известных {param}-имен.
Для всех предварительно найденных/введенных {param} имен, 
   дополнительно попытытся найти {param}, предполагая что есть такие, еще не найденные имена,
   которые начинается на теже n-символов, что и у предварительно найденных/введенных.
   
   - "маленькое значение": даст "излишние", не являющимися param имена.
   - "большое значение": не даст никакого эффекта.
   - "0": отключить повторный поиск, если попадает много лишних "не {param}".
   * В большинстве случаев можно использовать значение 3-4.
   
   В идеале использовать следует так:
   Например для param "zkau_171", "zkau_172" и т.д. следует выбрать "zkau_",
   а точнее длину len("zkau_") == 5, те установить spinbox в 5.

        # secondary_param_spin
'''.strip()

TT_LB = '''
Поиск {param} по LB.
Метод основан на том, что имена {param} всегда находятся в структурированном тексте-коде, например:
    ...
        value="zkau_1",
        value="var_1; var_2",
        value={"zkau_2"},
    ... 
 Т.о. можно взять LB='value="', и найти все {param} с этим LB: zkau_1 и var_1.

Следует учитывать что один и тот же {param}, в рамках разных файлов(action/Request/Response/другое),
    может иметь различные LB, даже в плане синтаксиса, например в логах.
'''.strip()

TT_LBP = '''
6) Поиск {param} пост-LB методом.
Метод основан том что, что если часть {param} имен уже известна, 
    то можно извлечь, для каждого {param}, для каждого файла, каждый LB. 
        Затем при помощи полученных LB, найти новые имена {param}, обычным LB-способом.

Запускать в самом конце, или при работе кнопки "Запуск", когда все {param},
    предварительно найдены(или созданы), всеми другими способами.
'''.strip()

TT_MinP = '''
Минимальная длина для {param}, состоящего только из цифр.
Отфильтровывать {param} с меньшей длиной.
      
Если установить (< 5),\nто некоторые методы могут принимать "http-порты" за цифровой {param}.
Например "8888", такие param необходимо будет отсеять вручную, в диалог-окне.
'''.strip()
